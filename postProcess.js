import path from "path";
import getJSON from "./parser";
import psm from "../PSM/psm";

const rules = {
  "Start > Header": (from, to, acc) => {
    acc.entries[acc.pointer].header.push(to.ocr_text);
    to.pointer = 0;
    return to;
  },
  "Start > *": (from, to, acc) => {
    return from;
  },
  "Header > Date": (from, to, acc) => {
    var obj = {};
    obj[to.ocr_text] = from.pointer;
    acc.entries[acc.pointer].dates.push(obj);
    return from;
  },
  "Header > Page": (from, to, acc) => {
    var obj = {};
    obj[to.ocr_text] = from.pointer;
    acc.entries[acc.pointer].pages.push(obj);
    return from;
  },
  "Header > Header": (from, to, acc) => {
    acc.entries[acc.pointer].header[from.pointer] += to.ocr_text + " ";
    to.pointer = from.pointer;
    return to;
  },
  "Header > Content": (from, to, acc) => {
    acc.entries[acc.pointer].content.push(to.ocr_text);
    to.pointer = from.pointer + 1;
    return to;
  },
  "Content > Date": (from, to, acc) => {
    var obj = {};
    obj[to.ocr_text] = from.pointer;
    acc.entries[acc.pointer].dates.push(obj);
    return from;
  },
  "Content > Page": (from, to, acc) => {
    var obj = {};
    obj[to.ocr_text] = from.pointer;

    acc.entries[acc.pointer].pages.push(obj);

    from.pointer += 1;
    return from;
  },
  "Content > Header": (from, to, acc) => {
    //Start new parser
    acc.pointer += 1;
    acc.entries[acc.pointer] = {
      header: [],
      content: [],
      pages: [],
      dates: [],
    };
    acc.entries[acc.pointer].header.push(to.ocr_text);
    to.pointer = 0;
    return to;
  },
  "Content > Content": (from, to, acc) => {
    let ptr = from.pointer - acc.entries[acc.pointer].header.length;
    console.log(ptr);
    if (acc.entries[acc.pointer].content[ptr] == undefined)
      acc.entries[acc.pointer].content[ptr] = "";
    acc.entries[acc.pointer].content[ptr] += to.ocr_text += " ";
    return from;
  },
};

const sorter = (a, b) => {
  if (a.ymin - b.ymin < -10) {
    return -1;
  } else if (a.ymin - b.ymin > 10) {
    return 1;
  } else if (a.xmin < b.xmin) {
    return -1;
  } else if (a.xmin > b.xmin) {
    return 1;
  } else {
    return 0;
  }
};

export function process() {
  var data = getJSON(path.join(__dirname, "data.json"));
  var keys = Object.keys(data);

  for (var key in keys) {
    var curr = data[keys[key]];
    curr.result.forEach((res) => {
      // Iterating through each card:
      if (res.message == "Success") {
        // process sorted predictions with PSM
        res.parsed = psmProcess()(res.prediction);
        // turn the pointers generated by the machine for indexes and dates
        //  into the content they point to.
        res.parsed.entries.forEach((entry) => {
          var cnt = entry.header.concat(entry.content);
          entry.pages.map((obj) => {
            Object.keys(obj).forEach((key) => {
              obj[key] = cnt[obj[key]];
            });
          });
          entry.dates.map((obj) => {
            Object.keys(obj).forEach((key) => {
              obj[key] = cnt[obj[key]];
            });
          });
        });
        // return the response, with a new parsed field!
        return res;
      } else {
        return res;
      }
    });
  }
  return data;
}

function psmProcess() {
  return psm(
    rules,
    (datum) => datum.label,
    { label: "Start" },
    {
      entries: [{ header: [], content: [], pages: [], dates: [] }],
      pointer: 0,
    },
    sorter
  );
}
